//done using hashmaps 
//Time Compleixty : O( (m+n)log(m+n) ) . Inserting a key in map takes logN times, where N is no of elements in map. At max map can store m+n elements {when there are no common elements and elements in arr,arr2 are distntict}. So Inserting m+n th element takes log(m+n) time. Upon approximation across insertion of all elements in worst it would take O((m+n)log(m+n) time.
//Space Complexity : O(m+n) {If Space of Union ArrayList is considered} 

import java.util.*;
public class Main
{
	public static void main(String[] args) {
		int []arr1={1,2,3,3,2,4,5};
		int[]arr2={3,0,8,9,5,-1,-8};
		HashMap<Integer,Integer> tempMap = new HashMap<>();
		ArrayList<Integer> arrList = new ArrayList<>();
		for(int i: arr1){
		    tempMap.put(i,tempMap.getOrDefault(i,0));
		}
		for(int i: arr2){
		    tempMap.put(i,tempMap.getOrDefault(i,0));
		}
		for(int j: tempMap.keySet()){
		    arrList.add(j);
		}
		System.out.println(arrList);
		
	}
}

//Using HashSet as data structures.
//Time and space complexity is same as above.
//Practised on gdb online
import java.util.*;
public class Main
{
	public static void main(String[] args) {
		int arr1[]={1,2,3,0,8,1,2,3};
		int arr2[]={1,2,7,8,5,6,-2,1,-1};
		HashSet<Integer> tempMap=new HashSet<>();
		for(int i : arr1){
		    tempMap.add(i);
		}
		//Insertion of elements into a hashmap takes log(n) time.
		for(int i : arr2){
		    tempMap.add(i);
		}
		ArrayList<Integer> tempArr = new ArrayList<>();
		for(int i : tempMap){
		    tempArr.add(i);
		}
		System.out.println(tempArr);
		
		
	}
}

//Optimal solution uisng two pointers. 
//Time complexity is O(N) 
// Practiced on gdb online compiler.

import java.util.*;
public class Main
{
	public static void main(String[] args) {
	    int arr1[]={0,1,2,4,5,7,100};
	    int arr2[]={0,4,5,7,8,9,200};
	    int n1 = arr1.length;
	    int n2 = arr2.length;
	    ArrayList<Integer> arrList = new ArrayList<>();
	    int i=0,j=0;
	    while(i< n1 && j < n2){
	        if(arr1[i]<= arr2[j]){
	            if(arrList.size() == 0 || arrList.get(arrList.size()-1) != arr1[i]){
	                arrList.add(arr1[i]);
	            }
	            i++;
	        }
	        else if(arr2[j] < arr1[i]){
	            if(arrList.size()==0 || arrList.get(arrList.size()-1) != arr2[j]){
	            arrList.add(arr2[j]);
	        }
	        j++;
	            
	        } 
	        
	    }
	    while(j<n2){
	        if(arrList.size()==0 || arrList.get(arrList.size()-1) != arr2[j]){
	            arrList.add(arr2[j]);
	        }
	        j++;
	        
	    }
	    while(i<n1){
	        if(arrList.size()==0 || arrList.get(arrList.size()-1) != arr1[i]){
	            arrList.add(arr1[i]);
	        }
	        i++;
	        
	    }
	    System.out.println(arrList);
		
	}
}


